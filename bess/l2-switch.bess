# -*- mode: python; -*-
import re
import struct
import operator

vnf_inport = int($control_vnf_inport!'0')
vnf_outport = int($control_vnf_outport!'0')
infix = $scenario_infix!'simple'
workers = int($vnf_num_cores!'1')

def mac_from_str(s):
  return ''.join([ chr(int(c, 16)) for c in s.split(':') ])

# ---------------------------------------------------------------------------
portIn = PMDPort(port_id=vnf_inport,
                 num_inc_q=workers,
                 num_out_q=workers)
if vnf_inport == vnf_outport:
  portOut = portIn
else:
  portOut = PMDPort(port_id=vnf_outport)

filename = 'l2-switch.%s_%s.flows' % (infix, 'unidir')

for wid in range(workers):
  input = QueueInc(port=portIn.name, qid=wid)
  buf = Buffer()
  output = QueueOut(port=portOut.name, qid=wid)

  table0 = ExactMatch(fields=[{'offset': 6, 'num_bytes': 6}])  # src
  table2 = ExactMatch(fields=[{'offset': 0, 'num_bytes': 6}])  # dst
  table0.set_default_gate(gate=1)
  table2.set_default_gate(gate=1)
  table0:1 -> buf
  table2:1 -> buf

  with open($MAIN_ROOT + '/of_rules/' + filename, 'r') as f:
    for line in f:
      m = re.search('table=0,.*,dl_src=([^,]+)', line)
      if m:
        table0.add(fields=[{'value_bin':mac_from_str(m.group(1))}], gate=0)
      else:
        m = re.search('table=2,dl_dst=([^,]+)', line)
        if not m:
          continue
        table2.add(fields=[{'value_bin':mac_from_str(m.group(1))}], gate=0)

  input -> table0 -> table2 -> buf -> output
  bess.add_worker(wid, wid)
  bess.attach_module(input.name, wid=wid)
