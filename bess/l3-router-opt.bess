# -*- mode: python; -*-
import struct
import re

vnf_inport = int($control_vnf_inport!'0')
vnf_outport = int($control_vnf_outport!'0')
infix = $scenario_infix!'simple'
workers = int($vnf_num_cores!'1')

# ---------------------------------------------------------------------------
portIn = PMDPort(port_id=vnf_inport,
                 num_inc_q=workers,
                 num_out_q=workers)
if vnf_inport == vnf_outport:
  portOut = portIn
else:
  portOut = PMDPort(port_id=vnf_outport)

fib_size = int(infix.split('_')[-1]) + 100
file_flows = 'l3-router.%s_%s.flows' % (infix, 'unidir')
file_groups = 'l3-router.%s_%s.groups' % (infix, 'unidir')

for wid in range(workers):
  input = QueueInc(port=portIn.name, qid=wid)
  buf = Buffer()
  output = QueueOut(port=portOut.name, qid=wid)

  l3fib = IPLookup(max_rules=fib_size, max_tbl8s=fib_size)

  with open($MAIN_ROOT + '/of_rules/' + file_flows, 'r') as f:
    for line in f:
      m = re.search('nw_dst=([^/]+)/(\d+).*group:(\d+)', line)
      if not m:
        continue
      l3fib.add(prefix=m.group(1), prefix_len=int(m.group(2)),
                gate=int(m.group(3)))
  ret = l3fib.add(prefix='0.0.0.0', prefix_len=0, gate=0)

  with open($MAIN_ROOT + '/of_rules/' + file_groups, 'r') as f:
    for line in f:
      m = re.search('group_id=(\d+),.*mod_dl_src:([^,]+),mod_dl_dst:([^,]+)',
                    line)
      if not m:
        continue
      gin = int(m.group(1))
      src = int(m.group(2).replace(':', ''), 16)
      dst = int(m.group(3).replace(':', ''), 16)
      u_dst = Update(fields=[{'offset': 0, 'size': 6, 'value': dst}])
      u_src = Update(fields=[{'offset': 6, 'size': 6, 'value': src}])
      l3fib:gin -> u_dst -> u_src -> buf

  ethertype = ExactMatch(fields=[{'offset': 12, 'num_bytes':2}])
  ethertype.add(fields=[{'value_bin':struct.pack("!H", 0x0806)}], gate=1)  # ARP
  ethertype.add(fields=[{'value_bin':struct.pack("!H", 0x0800)}], gate=0)  # IPv4
  ethertype.set_default_gate(gate=2)

  input -> ethertype -> UpdateTTL() -> l3fib
  ethertype:1 -> buf
  ethertype:2 -> buf
  buf -> output

  bess.add_worker(wid, wid)
  bess.attach_module(input.name, wid=wid)


#bess.disable_track('')
